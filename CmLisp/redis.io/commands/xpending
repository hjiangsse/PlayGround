<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <title>XPENDING â€“ Redis</title>
    <link href='/styles.css' rel='stylesheet'>
    <link href='/images/favicon.png' rel='shortcut icon'>
    <link href='/opensearch.xml' rel='search' title='Look up a Redis command' type='application/opensearchdescription+xml'>
    <meta content='width=device-width, minimum-scale=1.0, maximum-scale=1.0' name='viewport'>
    <script>
       var _gaq = _gaq || [];
       _gaq.push(['_setAccount', 'UA-20243082-1']);
       _gaq.push(['_trackPageview']);
      
       (function() {
         var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
         ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
         var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
       })();
    </script>
  </head>
  <body class=''>
    <div class='mobile-menu slideout-menu'>
      <header class='menu-header'></header>
      <section class='menu-section'>
        <ul class='menu-section-list'>
          <li>
            <a class='home' href='/'>Home</a>
          </li>
          <li>
            <a href='/commands'>Commands</a>
          </li>
          <li>
            <a href='/clients'>Clients</a>
          </li>
          <li>
            <a href='/documentation'>Documentation</a>
          </li>
          <li>
            <a href='/community'>Community</a>
          </li>
          <li>
            <a href='/download'>Download</a>
          </li>
          <li>
            <a href='/modules'>Modules</a>
          </li>
          <li>
            <a href='/support'>Support</a>
          </li>
        </ul>
      </section>
    </div>
    <div class='site-wrapper'>
      <header class='site-header'>
        <nav class='container'>
          <div class='mobile-header'>
            <button class='btn-hamburger js-slideout-toggle'>
              <span class='fa fa-bars'></span>
            </button>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
          </div>
          <div class='desktop-header'>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
            <a href='/commands'>Commands</a>
            <a href='/clients'>Clients</a>
            <a href='/documentation'>Documentation</a>
            <a href='/community'>Community</a>
            <a href='/download'>Download</a>
            <a href='/modules'>Modules</a>
            <a href='/support'>Support</a>
          </div>
        </nav>
      </header>
      <div class='site-content'>
        <div class='text'>
          <h1 class='command'>
            <span class='name'>XPENDING</span>
            <span class='arg'>key</span>
            <span class='arg'>group</span>
            <span class='arg'>[start end count]</span>
            <span class='arg'>[consumer]</span>
          </h1>
          <article>
            <div class='article-main'>
              <div class='metadata'>
                <p><strong>Available since 5.0.0.</strong></p>
                <p><strong>Time complexity:</strong> O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). When the command returns just the summary it runs in O(1) time assuming the list of consumers is small, otherwise there is additional O(N) time needed to iterate every consumer.</p>
              </div>
              <p>Fetching data from a stream via a consumer group, and not acknowledging
              such data, has the effect of creating <em>pending entries</em>. This is
              well explained in the <a href="/commands/xreadgroup">XREADGROUP</a> command, and even better in our
              <a href="/topics/streams-intro">introduction to Redis Streams</a>. The <a href="/commands/xack">XACK</a> command
              will immediately remove the pending entry from the Pending Entry List (PEL)
              since once a message is successfully processed, there is no longer need
              for the consumer group to track it and to remember the current owner
              of the message.</p>
              
              <p>The <a href="/commands/xpending">XPENDING</a> command is the interface to inspect the list of pending
              messages, and is as thus a very important command in order to observe
              and understand what is happening with a streams consumer groups: what
              clients are active, what messages are pending to be consumed, or to see
              if there are idle messages. Moreover this command, together with <a href="/commands/xclaim">XCLAIM</a>
              is used in order to implement recovering of consumers that are failing
              for a long time, and as a result certain messages are not processed: a
              different consumer can claim the message and continue. This is better
              explained in the <a href="/topics/streams-intro">streams intro</a> and in the
              <a href="/commands/xclaim">XCLAIM</a> command page, and is not covered here.</p>
              
              <span id="summary-form-of-xpending" class=anchor></span><h2 ><a href="#summary-form-of-xpending" class=anchor-link>*</a>Summary form of XPENDING</h2>
              
              <p>When <a href="/commands/xpending">XPENDING</a> is called with just a key name and a consumer group
              name, it just outputs a summary about the pending messages in a given
              consumer group. In the following example, we create a consumed group and
              immediatelycreate a pending message by reading from the group with
              <a href="/commands/xreadgroup">XREADGROUP</a>.</p>
              
              <pre><code>&gt; XGROUP CREATE mystream group55 0-0&#x000A;OK&#x000A;&#x000A;&gt; XREADGROUP GROUP group55 consumer-123 COUNT 1 STREAMS mystream &gt;&#x000A;1) 1) &quot;mystream&quot;&#x000A;   2) 1) 1) 1526984818136-0&#x000A;         2) 1) &quot;duration&quot;&#x000A;            2) &quot;1532&quot;&#x000A;            3) &quot;event-id&quot;&#x000A;            4) &quot;5&quot;&#x000A;            5) &quot;user-id&quot;&#x000A;            6) &quot;7782813&quot;&#x000A;</code></pre>
              
              <p>We expect the pending entries list for the consumer group <code>group55</code> to
              have a message right now: consumer named <code>consumer-123</code> fetched the
              message without acknowledging its processing. The simples <a href="/commands/xpending">XPENDING</a>
              form will give us this information:</p>
              
              <pre><code>&gt; XPENDING mystream group55&#x000A;1) (integer) 1&#x000A;2) 1526984818136-0&#x000A;3) 1526984818136-0&#x000A;4) 1) 1) &quot;consumer-123&quot;&#x000A;      2) &quot;1&quot;&#x000A;</code></pre>
              
              <p>In this form, the command outputs the total number of pending messages for this
              consumer group, which is one, followed by the smallest and greatest ID among the
              pending messages, and then list every consumer in the consumer group with
              at least one pending message, and the number of pending messages it has.</p>
              
              <p>This is a good overview, but sometimes we are interested in the details.
              In order to see all the pending messages with more associated information
              we need to also pass a range of IDs, in a similar way we do it with
              <a href="/commands/xrange">XRANGE</a>, and a non optional <em>count</em> argument, to limit the number
              of messages returned per call:</p>
              
              <pre><code>&gt; XPENDING mystream group55 - + 10&#x000A;1) 1) 1526984818136-0&#x000A;   2) &quot;consumer-123&quot;&#x000A;   3) (integer) 196415&#x000A;   4) (integer) 1&#x000A;</code></pre>
              
              <p>In the extended form we no longer see the summary information, instead there
              are detailed information for each message in the pending entries list. For
              each message four attributes are returned:</p>
              
              <ol>
              <li>The ID of the message.</li>
              <li>The name of the consumer that fetched the message and has still to acknowledge it. We call it the current <em>owner</em> of the message.</li>
              <li>The number of milliseconds that elapsed since the last time this message was delivered to this consumer.</li>
              <li>The number of times this message was delivered.</li>
              </ol>
              
              <p>The deliveries counter, that is the fourth element in the array, is incremented
              when some other consumer <em>claims</em> the message with <a href="/commands/xclaim">XCLAIM</a>, or when the
              message is delivered again via <a href="/commands/xreadgroup">XREADGROUP</a>, when accessing the history
              of a consumer in a consumer group (see the <a href="/commands/xreadgroup">XREADGROUP</a> page for more info).</p>
              
              <p>Finally it is possible to pass an additional argument to the command, in order
              to see the messages having a specific owner:</p>
              
              <pre><code>&gt; XPENDING mystream group55 - + 10 consumer-123&#x000A;</code></pre>
              
              <p>But in the above case the output would be the same, since we have pending
              messages only for a single consumer. However what is important to keep in
              mind is that this operation, filtering by a specific consumer, is not
              inefficient even when there are many pending messages from many consumers:
              we have a pending entries list data structure both globally, and for
              every consumer, so we can very efficiently show just messages pending for
              a single consumer.</p>
              
              <span id="return-value" class=anchor></span><h2 ><a href="#return-value" class=anchor-link>*</a>Return value</h2>
              
              <p><a href="/topics/protocol#array-reply">Array reply</a>, specifically:</p>
              
              <p>The command returns data in different format depending on the way it is
              called, as previously explained in this page. However the reply is always
              an array of items.</p>
            </div>
            <div class='article-aside'>
              <aside>
                <h2>
                  Related commands
                </h2>
                <ul>
                  <li>
                    <a href='/commands/xack'>
                      XACK
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xadd'>
                      XADD
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xclaim'>
                      XCLAIM
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xdel'>
                      XDEL
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xgroup'>
                      XGROUP
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xinfo'>
                      XINFO
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xlen'>
                      XLEN
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xpending'>
                      <strong>XPENDING</strong>
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xrange'>
                      XRANGE
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xread'>
                      XREAD
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xreadgroup'>
                      XREADGROUP
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xrevrange'>
                      XREVRANGE
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xtrim'>
                      XTRIM
                    </a>
                  </li>
                </ul>
              </aside>
            </div>
          </article>
        </div>
      </div>
      <footer class='site-footer'>
        <div class='container'>
          <p>
            This website is
            <a href="https://github.com/antirez/redis-io">open source software</a>.
            See all <a href="/topics/sponsors">credits</a>.
          </p>
          <div class='sponsor'>
            Sponsored by
            <a href='https://redislabs.com/'>
              <img alt='Redis Labs' height='25' src='/images/redislabs.png' title='Get a Managed Redis' width='128'>
            </a>
          </div>
        </div>
      </footer>
    </div>
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js'></script>
    <script src='/app.js?1480208557'></script>
  </body>
</html>
