<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <title>XREADGROUP â€“ Redis</title>
    <link href='/styles.css' rel='stylesheet'>
    <link href='/images/favicon.png' rel='shortcut icon'>
    <link href='/opensearch.xml' rel='search' title='Look up a Redis command' type='application/opensearchdescription+xml'>
    <meta content='width=device-width, minimum-scale=1.0, maximum-scale=1.0' name='viewport'>
    <script>
       var _gaq = _gaq || [];
       _gaq.push(['_setAccount', 'UA-20243082-1']);
       _gaq.push(['_trackPageview']);
      
       (function() {
         var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
         ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
         var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
       })();
    </script>
  </head>
  <body class=''>
    <div class='mobile-menu slideout-menu'>
      <header class='menu-header'></header>
      <section class='menu-section'>
        <ul class='menu-section-list'>
          <li>
            <a class='home' href='/'>Home</a>
          </li>
          <li>
            <a href='/commands'>Commands</a>
          </li>
          <li>
            <a href='/clients'>Clients</a>
          </li>
          <li>
            <a href='/documentation'>Documentation</a>
          </li>
          <li>
            <a href='/community'>Community</a>
          </li>
          <li>
            <a href='/download'>Download</a>
          </li>
          <li>
            <a href='/modules'>Modules</a>
          </li>
          <li>
            <a href='/support'>Support</a>
          </li>
        </ul>
      </section>
    </div>
    <div class='site-wrapper'>
      <header class='site-header'>
        <nav class='container'>
          <div class='mobile-header'>
            <button class='btn-hamburger js-slideout-toggle'>
              <span class='fa fa-bars'></span>
            </button>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
          </div>
          <div class='desktop-header'>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
            <a href='/commands'>Commands</a>
            <a href='/clients'>Clients</a>
            <a href='/documentation'>Documentation</a>
            <a href='/community'>Community</a>
            <a href='/download'>Download</a>
            <a href='/modules'>Modules</a>
            <a href='/support'>Support</a>
          </div>
        </nav>
      </header>
      <div class='site-content'>
        <div class='text'>
          <h1 class='command'>
            <span class='name'>XREADGROUP</span>
            <span class='arg'>GROUP group consumer</span>
            <span class='arg'>[COUNT count]</span>
            <span class='arg'>[BLOCK milliseconds]</span>
            <span class='arg'>[NOACK]</span>
            <span class='arg'>STREAMS</span>
            <span class='arg'>key [key ...]</span>
            <span class='arg'>ID [ID ...]</span>
          </h1>
          <article>
            <div class='article-main'>
              <div class='metadata'>
                <p><strong>Available since 5.0.0.</strong></p>
                <p><strong>Time complexity:</strong> For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.</p>
              </div>
              <p>The <a href="/commands/xreadgroup">XREADGROUP</a> command is a special version of the <a href="/commands/xread">XREAD</a> command
              with support for consumer groups. Probably you will have to understand the
              <a href="/commands/xread">XREAD</a> command before reading this page will makes sense.</p>
              
              <p>Moreover, if you are new to streams, we recommend to read our
              <a href="/topics/streams-intro">introduction to Redis Streams</a>.
              Make sure to understand the concept of consumer group in the introduction
              so that following how this command works will be simpler.</p>
              
              <span id="consumer-groups-in-30-seconds" class=anchor></span><h2 ><a href="#consumer-groups-in-30-seconds" class=anchor-link>*</a>Consumer groups in 30 seconds</h2>
              
              <p>The difference between this command and the vanilla <a href="/commands/xread">XREAD</a> is that this
              one supports consumer groups.</p>
              
              <p>Without consumer groups, just using <a href="/commands/xread">XREAD</a>, all the clients are served with all the entries arriving in a stream. Instead using consumer groups with <a href="/commands/xreadgroup">XREADGROUP</a>, it is possible to create groups of clients that consume different parts of the messages arriving in a given stream. If, for instance, the stream gets the new entires A, B, and C and there are two consumers reading via a consumer group, one client will get, for instance, the messages A and C, and the other the message B, and so forth.</p>
              
              <p>Within a consumer group, a given consumer (that is, just a client consuming messages from the stream), has to identify with an unique <em>consumer name</em>. Which is just a string.</p>
              
              <p>One of the guarantees of consumer groups is that a given consumer can only see the history of messages that were delivered to it, so a message has just a single owner. However there is a special feature called <em>message claiming</em> that allows other consumers to claim messages in case there is a non recoverable failure of some consumer. In order to implement such semantics, consumer groups require explicit acknowledgement of the messages successfully processed by the consumer, via the <a href="/commands/xack">XACK</a> command. This is needed because the stream will track, for each consumer group, who is processing what message.</p>
              
              <p>This is how to understand if you want to use a consumer group or not:</p>
              
              <ol>
              <li>If you have a stream and multiple clients, and you want all the clients to get all the messages, you do not need a consumer group.</li>
              <li>If you have a stream and multiple clients, and you want the stream to be <em>partitioned</em> or <em>shareded</em> across your clients, so that each client will get a sub set of the messages arriving in a stream, you need a consumer group.</li>
              </ol>
              
              <span id="differences-between-xread-and-xreadgroup" class=anchor></span><h2 ><a href="#differences-between-xread-and-xreadgroup" class=anchor-link>*</a>Differences between XREAD and XREADGROUP</h2>
              
              <p>From the point of view of the syntax, the commands are almost the same,
              however <a href="/commands/xreadgroup">XREADGROUP</a> <em>requires</em> a special and mandatory option:</p>
              
              <pre><code>GROUP &lt;group-name&gt; &lt;consumer-name&gt;&#x000A;</code></pre>
              
              <p>The group name is just the name of a consumer group associated to the stream.
              The group is created using the <a href="/commands/xgroup">XGROUP</a> command. The consumer name is the
              string that is used by the client to identify itself inside the group.
              The consumer is auto created inside the consumer group the first time it
              is saw. Different clients should select a different consumer name.</p>
              
              <p>When you read with <a href="/commands/xreadgroup">XREADGROUP</a>, the server will <em>remember</em> that a given
              message was delivered to you: the message will be stored inside the
              consumer group in what is called a Pending Entries List (PEL), that is
              a list of message IDs delivered but not yet acknowledged.</p>
              
              <p>The client will have to acknowledge the message processing using <a href="/commands/xack">XACK</a>
              in order for the pending entry to be removed from the PEL. The PEL
              can be inspected using the <a href="/commands/xpending">XPENDING</a> command.</p>
              
              <p>The <code>NOACK</code> subcommand can be used to avoid adding the message to the PEL in
              cases where reliability is not a requirement and the occasional message loss
              is acceptable. This is equivalent to acknowledging the message when it is read.</p>
              
              <p>The ID to specify in the <strong>STREAMS</strong> option when using <a href="/commands/xreadgroup">XREADGROUP</a> can
              be one of the following two:</p>
              
              <ul>
              <li>The special <code>&gt;</code> ID, which means that the consumer want to receive only messages that were <em>never delivered to any other consumer</em>. It just means, give me new messages.</li>
              <li>Any other ID, that is, 0 or any other valid ID or incomplete ID (just the millisecond time part), will have the effect of returning entries that are pending for the consumer sending the command. So basically if the ID is not <code>&gt;</code>, then the command will just let the client access its pending entries: delivered to it, but not yet acknowledged.</li>
              </ul>
              
              <p>Like <a href="/commands/xread">XREAD</a> the <a href="/commands/xreadgroup">XREADGROUP</a> command can be used in a blocking way. There
              are no differences in this regard.</p>
              
              <span id="what-happens-when-a-message-is-delivered-to-a-consumer" class=anchor></span><h2 ><a href="#what-happens-when-a-message-is-delivered-to-a-consumer" class=anchor-link>*</a>What happens when a message is delivered to a consumer?</h2>
              
              <p>Two things:</p>
              
              <ol>
              <li>If the message was never delivered to anyone, that is, if we are talking about a new message, then a PEL (Pending Entry List) is created.</li>
              <li>If instead the message was already delivered to this consumer, and it is just re-fetching the same message again, then the <em>last delivery counter</em> is updated to the current time, and the <em>number of deliveries</em> is incremented by one. You can access those message properties using the <a href="/commands/xpending">XPENDING</a> command.</li>
              </ol>
              
              <span id="usage-example" class=anchor></span><h2 ><a href="#usage-example" class=anchor-link>*</a>Usage example</h2>
              
              <p>Normally you use the command like that in order to get new messages and
              process them. In pseudo-code:</p>
              
              <pre><code>WHILE true&#x000A;    entries = XREADGROUP $GroupName $ConsumerName BLOCK 2000 COUNT 10 STREAMS mystream &gt;&#x000A;    if entries == nil&#x000A;        puts &quot;Timeout... try again&quot;&#x000A;        CONTINUE&#x000A;    end&#x000A;&#x000A;    FOREACH entries AS stream_entries&#x000A;        FOREACH stream_entries as message&#x000A;            process_message(message.id,message.fields)&#x000A;&#x000A;            # ACK the message as processed&#x000A;            XACK mystream $GroupName message.id&#x000A;        END&#x000A;    END&#x000A;END&#x000A;</code></pre>
              
              <p>In this way the example consumer code will fetch only new messages, process
              them, and acknowledge them via <a href="/commands/xack">XACK</a>. However the example code above is
              not complete, because it does not handle recovering after a crash. What
              will happen if we crash in the middle of processing messages, is that our
              messages will remain in the pending entries list, so we can access our
              history by giving <a href="/commands/xreadgroup">XREADGROUP</a> initially an ID of 0, and performing the same
              loop. Once providing and ID of 0 the reply is an empty set of messages, we
              know that we processed and acknowledged all the pending messages: we
              can start to use <code>&gt;</code> as ID, in order to get the new messages and rejoin the
              consumers that are processing new things.</p>
              
              <p>To see how the command actually replies, please check the <a href="/commands/xread">XREAD</a> command page.</p>
            </div>
            <div class='article-aside'>
              <aside>
                <h2>
                  Related commands
                </h2>
                <ul>
                  <li>
                    <a href='/commands/xack'>
                      XACK
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xadd'>
                      XADD
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xclaim'>
                      XCLAIM
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xdel'>
                      XDEL
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xgroup'>
                      XGROUP
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xinfo'>
                      XINFO
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xlen'>
                      XLEN
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xpending'>
                      XPENDING
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xrange'>
                      XRANGE
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xread'>
                      XREAD
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xreadgroup'>
                      <strong>XREADGROUP</strong>
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xrevrange'>
                      XREVRANGE
                    </a>
                  </li>
                  <li>
                    <a href='/commands/xtrim'>
                      XTRIM
                    </a>
                  </li>
                </ul>
              </aside>
            </div>
          </article>
        </div>
      </div>
      <footer class='site-footer'>
        <div class='container'>
          <p>
            This website is
            <a href="https://github.com/antirez/redis-io">open source software</a>.
            See all <a href="/topics/sponsors">credits</a>.
          </p>
          <div class='sponsor'>
            Sponsored by
            <a href='https://redislabs.com/'>
              <img alt='Redis Labs' height='25' src='/images/redislabs.png' title='Get a Managed Redis' width='128'>
            </a>
          </div>
        </div>
      </footer>
    </div>
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js'></script>
    <script src='/app.js?1480208557'></script>
  </body>
</html>
