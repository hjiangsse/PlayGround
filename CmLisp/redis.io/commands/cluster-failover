<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <title>CLUSTER FAILOVER â€“ Redis</title>
    <link href='/styles.css' rel='stylesheet'>
    <link href='/images/favicon.png' rel='shortcut icon'>
    <link href='/opensearch.xml' rel='search' title='Look up a Redis command' type='application/opensearchdescription+xml'>
    <meta content='width=device-width, minimum-scale=1.0, maximum-scale=1.0' name='viewport'>
    <script>
       var _gaq = _gaq || [];
       _gaq.push(['_setAccount', 'UA-20243082-1']);
       _gaq.push(['_trackPageview']);
      
       (function() {
         var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
         ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
         var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
       })();
    </script>
  </head>
  <body class=''>
    <div class='mobile-menu slideout-menu'>
      <header class='menu-header'></header>
      <section class='menu-section'>
        <ul class='menu-section-list'>
          <li>
            <a class='home' href='/'>Home</a>
          </li>
          <li>
            <a href='/commands'>Commands</a>
          </li>
          <li>
            <a href='/clients'>Clients</a>
          </li>
          <li>
            <a href='/documentation'>Documentation</a>
          </li>
          <li>
            <a href='/community'>Community</a>
          </li>
          <li>
            <a href='/download'>Download</a>
          </li>
          <li>
            <a href='/modules'>Modules</a>
          </li>
          <li>
            <a href='/support'>Support</a>
          </li>
        </ul>
      </section>
    </div>
    <div class='site-wrapper'>
      <header class='site-header'>
        <nav class='container'>
          <div class='mobile-header'>
            <button class='btn-hamburger js-slideout-toggle'>
              <span class='fa fa-bars'></span>
            </button>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
          </div>
          <div class='desktop-header'>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
            <a href='/commands'>Commands</a>
            <a href='/clients'>Clients</a>
            <a href='/documentation'>Documentation</a>
            <a href='/community'>Community</a>
            <a href='/download'>Download</a>
            <a href='/modules'>Modules</a>
            <a href='/support'>Support</a>
          </div>
        </nav>
      </header>
      <div class='site-content'>
        <div class='text'>
          <h1 class='command'>
            <span class='name'>CLUSTER FAILOVER</span>
            <span class='arg'>[FORCE|TAKEOVER]</span>
          </h1>
          <article>
            <div class='article-main'>
              <div class='metadata'>
                <p><strong>Available since 3.0.0.</strong></p>
                <p><strong>Time complexity:</strong> O(1)</p>
              </div>
              <p>This command, that can only be sent to a Redis Cluster replica node, forces
              the replica to start a manual failover of its master instance.</p>
              
              <p>A manual failover is a special kind of failover that is usually executed when
              there are no actual failures, but we wish to swap the current master with one
              of its replicas (which is the node we send the command to), in a safe way,
              without any window for data loss. It works in the following way:</p>
              
              <ol>
              <li>The replica tells the master to stop processing queries from clients.</li>
              <li>The master replies to the replica with the current <em>replication offset</em>.</li>
              <li>The replica waits for the replication offset to match on its side, to make sure it processed all the data from the master before it continues.</li>
              <li>The replica starts a failover, obtains a new configuration epoch from the majority of the masters, and broadcasts the new configuration.</li>
              <li>The old master receives the configuration update: unblocks its clients and starts replying with redirection messages so that they&#39;ll continue the chat with the new master.</li>
              </ol>
              
              <p>This way clients are moved away from the old master to the new master
              atomically and only when the replica that is turning into the new master
              has processed all of the replication stream from the old master.</p>
              
              <span id="force-option-manual-failover-when-the-master-is-down" class=anchor></span><h2 ><a href="#force-option-manual-failover-when-the-master-is-down" class=anchor-link>*</a>FORCE option: manual failover when the master is down</h2>
              
              <p>The command behavior can be modified by two options: <strong>FORCE</strong> and <strong>TAKEOVER</strong>.</p>
              
              <p>If the <strong>FORCE</strong> option is given, the replica does not perform any handshake
              with the master, that may be not reachable, but instead just starts a
              failover ASAP starting from point 4. This is useful when we want to start
              a manual failover while the master is no longer reachable.</p>
              
              <p>However using <strong>FORCE</strong> we still need the majority of masters to be available
              in order to authorize the failover and generate a new configuration epoch
              for the replica that is going to become master.</p>
              
              <span id="takeover-option-manual-failover-without-cluster-consensus" class=anchor></span><h2 ><a href="#takeover-option-manual-failover-without-cluster-consensus" class=anchor-link>*</a>TAKEOVER option: manual failover without cluster consensus</h2>
              
              <p>There are situations where this is not enough, and we want a replica to failover
              without any agreement with the rest of the cluster. A real world use case
              for this is to mass promote replicas in a different data center to masters
              in order to perform a data center switch, while all the masters are down
              or partitioned away.</p>
              
              <p>The <strong>TAKEOVER</strong> option implies everything <strong>FORCE</strong> implies, but also does
              not uses any cluster authorization in order to failover. A replica receiving
              <code>CLUSTER FAILOVER TAKEOVER</code> will instead:</p>
              
              <ol>
              <li>Generate a new <code>configEpoch</code> unilaterally, just taking the current greatest epoch available and incrementing it if its local configuration epoch is not already the greatest.</li>
              <li>Assign itself all the hash slots of its master, and propagate the new configuration to every node which is reachable ASAP, and eventually to every other node.</li>
              </ol>
              
              <p>Note that <strong>TAKEOVER violates the last-failover-wins principle</strong> of Redis Cluster, since the configuration epoch generated by the replica violates the normal generation of configuration epochs in several ways:</p>
              
              <ol>
              <li>There is no guarantee that it is actually the higher configuration epoch, since, for example, we can use the <strong>TAKEOVER</strong> option within a minority, nor any message exchange is performed to generate the new configuration epoch.</li>
              <li>If we generate a configuration epoch which happens to collide with another instance, eventually our configuration epoch, or the one of another instance with our same epoch, will be moved away using the <em>configuration epoch collision resolution algorithm</em>.</li>
              </ol>
              
              <p>Because of this the <strong>TAKEOVER</strong> option should be used with care.</p>
              
              <span id="implementation-details-and-notes" class=anchor></span><h2 ><a href="#implementation-details-and-notes" class=anchor-link>*</a>Implementation details and notes</h2>
              
              <p><a href="/commands/cluster-failover">CLUSTER FAILOVER</a>, unless the <strong>TAKEOVER</strong> option is specified,  does not
              execute a failover synchronously, it only <em>schedules</em> a manual failover,
              bypassing the failure detection stage, so to check if the failover actually
              happened, <a href="/commands/cluster-nodes">CLUSTER NODES</a> or other means should be used in order to verify
              that the state of the cluster changes after some time the command was sent.</p>
              
              <span id="return-value" class=anchor></span><h2 ><a href="#return-value" class=anchor-link>*</a>Return value</h2>
              
              <p><a href="/topics/protocol#simple-string-reply">Simple string reply</a>: <code>OK</code> if the command was accepted and a manual failover is going to be attempted. An error if the operation cannot be executed, for example if we are talking with a node which is already a master.</p>
            </div>
            <div class='article-aside'>
              <aside>
                <h2>
                  Related commands
                </h2>
                <ul>
                  <li>
                    <a href='/commands/cluster-addslots'>
                      CLUSTER ADDSLOTS
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-count-failure-reports'>
                      CLUSTER COUNT-FAILURE-REPORTS
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-countkeysinslot'>
                      CLUSTER COUNTKEYSINSLOT
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-delslots'>
                      CLUSTER DELSLOTS
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-failover'>
                      <strong>CLUSTER FAILOVER</strong>
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-forget'>
                      CLUSTER FORGET
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-getkeysinslot'>
                      CLUSTER GETKEYSINSLOT
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-info'>
                      CLUSTER INFO
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-keyslot'>
                      CLUSTER KEYSLOT
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-meet'>
                      CLUSTER MEET
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-nodes'>
                      CLUSTER NODES
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-replicas'>
                      CLUSTER REPLICAS
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-replicate'>
                      CLUSTER REPLICATE
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-reset'>
                      CLUSTER RESET
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-saveconfig'>
                      CLUSTER SAVECONFIG
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-set-config-epoch'>
                      CLUSTER SET-CONFIG-EPOCH
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-setslot'>
                      CLUSTER SETSLOT
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-slaves'>
                      CLUSTER SLAVES
                    </a>
                  </li>
                  <li>
                    <a href='/commands/cluster-slots'>
                      CLUSTER SLOTS
                    </a>
                  </li>
                  <li>
                    <a href='/commands/readonly'>
                      READONLY
                    </a>
                  </li>
                  <li>
                    <a href='/commands/readwrite'>
                      READWRITE
                    </a>
                  </li>
                </ul>
              </aside>
            </div>
          </article>
        </div>
      </div>
      <footer class='site-footer'>
        <div class='container'>
          <p>
            This website is
            <a href="https://github.com/antirez/redis-io">open source software</a>.
            See all <a href="/topics/sponsors">credits</a>.
          </p>
          <div class='sponsor'>
            Sponsored by
            <a href='https://redislabs.com/'>
              <img alt='Redis Labs' height='25' src='/images/redislabs.png' title='Get a Managed Redis' width='128'>
            </a>
          </div>
        </div>
      </footer>
    </div>
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js'></script>
    <script src='/app.js?1480208557'></script>
  </body>
</html>
