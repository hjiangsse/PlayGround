<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <title>Pub/Sub â€“ Redis</title>
    <link href='/styles.css' rel='stylesheet'>
    <link href='/images/favicon.png' rel='shortcut icon'>
    <link href='/opensearch.xml' rel='search' title='Look up a Redis command' type='application/opensearchdescription+xml'>
    <meta content='width=device-width, minimum-scale=1.0, maximum-scale=1.0' name='viewport'>
    <script>
       var _gaq = _gaq || [];
       _gaq.push(['_setAccount', 'UA-20243082-1']);
       _gaq.push(['_trackPageview']);
      
       (function() {
         var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
         ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
         var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
       })();
    </script>
  </head>
  <body class='topics pubsub'>
    <div class='mobile-menu slideout-menu'>
      <header class='menu-header'></header>
      <section class='menu-section'>
        <ul class='menu-section-list'>
          <li>
            <a class='home' href='/'>Home</a>
          </li>
          <li>
            <a href='/commands'>Commands</a>
          </li>
          <li>
            <a href='/clients'>Clients</a>
          </li>
          <li>
            <a href='/documentation'>Documentation</a>
          </li>
          <li>
            <a href='/community'>Community</a>
          </li>
          <li>
            <a href='/download'>Download</a>
          </li>
          <li>
            <a href='/modules'>Modules</a>
          </li>
          <li>
            <a href='/support'>Support</a>
          </li>
        </ul>
      </section>
    </div>
    <div class='site-wrapper'>
      <header class='site-header'>
        <nav class='container'>
          <div class='mobile-header'>
            <button class='btn-hamburger js-slideout-toggle'>
              <span class='fa fa-bars'></span>
            </button>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
          </div>
          <div class='desktop-header'>
            <a class='home' href='/'>
              <img alt='Redis' src='/images/redis-white.png'>
            </a>
            <a href='/commands'>Commands</a>
            <a href='/clients'>Clients</a>
            <a href='/documentation'>Documentation</a>
            <a href='/community'>Community</a>
            <a href='/download'>Download</a>
            <a href='/modules'>Modules</a>
            <a href='/support'>Support</a>
          </div>
        </nav>
      </header>
      <div class='site-content'>
        <div class='text'>
          <article id='topic'>
            <aside>
              <h2>
                Related commands
              </h2>
              <ul>
                <li>
                  <a href='/commands/psubscribe'>PSUBSCRIBE</a>
                </li>
                <li>
                  <a href='/commands/publish'>PUBLISH</a>
                </li>
                <li>
                  <a href='/commands/pubsub'>PUBSUB</a>
                </li>
                <li>
                  <a href='/commands/punsubscribe'>PUNSUBSCRIBE</a>
                </li>
                <li>
                  <a href='/commands/subscribe'>SUBSCRIBE</a>
                </li>
                <li>
                  <a href='/commands/unsubscribe'>UNSUBSCRIBE</a>
                </li>
              </ul>
            </aside>
            <span id="pubsub" class=anchor></span><h1 ><a href="#pubsub" class=anchor-link>*</a>Pub/Sub</h1>
            
            <p><a href="/commands/subscribe">SUBSCRIBE</a>, <a href="/commands/unsubscribe">UNSUBSCRIBE</a> and <a href="/commands/publish">PUBLISH</a>
            implement the <a href="http://en.wikipedia.org/wiki/Publish/subscribe">Publish/Subscribe messaging
            paradigm</a> where
            (citing Wikipedia) senders (publishers) are not programmed to send
            their messages to specific receivers (subscribers). Rather, published
            messages are characterized into channels, without knowledge of what (if
            any) subscribers there may be. Subscribers express interest in one or
            more channels, and only receive messages that are of interest, without
            knowledge of what (if any) publishers there are. This decoupling of
            publishers and subscribers can allow for greater scalability and a more
            dynamic network topology.</p>
            
            <p>For instance in order to subscribe to channels <code>foo</code> and <code>bar</code> the
            client issues a <a href="/commands/subscribe">SUBSCRIBE</a> providing the names of the channels:</p>
            
            <pre><code>SUBSCRIBE foo bar&#x000A;</code></pre>
            
            <p>Messages sent by other clients to these channels will be pushed by Redis
            to all the subscribed clients.</p>
            
            <p>A client subscribed to one or more channels should not issue commands,
            although it can subscribe and unsubscribe to and from other channels.
            The replies to subscription and unsubscription operations are sent in
            the form of messages, so that the client can just read a coherent
            stream of messages where the first element indicates the type of
            message. The commands that are allowed in the context of a subscribed
            client are <a href="/commands/subscribe">SUBSCRIBE</a>, <a href="/commands/psubscribe">PSUBSCRIBE</a>, <a href="/commands/unsubscribe">UNSUBSCRIBE</a>, <a href="/commands/punsubscribe">PUNSUBSCRIBE</a>,
            <a href="/commands/ping">PING</a> and <a href="/commands/quit">QUIT</a>.</p>
            
            <p>Please note that <code>redis-cli</code> will not accept any commands once in
            subscribed mode and can only quit the mode with <code>Ctrl-C</code>.</p>
            
            <span id="format-of-pushed-messages" class=anchor></span><h2 ><a href="#format-of-pushed-messages" class=anchor-link>*</a>Format of pushed messages</h2>
            
            <p>A message is a <a href="/topics/protocol#array-reply">Array reply</a> with three elements.</p>
            
            <p>The first element is the kind of message:</p>
            
            <ul>
            <li><p><code>subscribe</code>: means that we successfully subscribed to the channel
            given as the second element in the reply. The third argument represents
            the number of channels we are currently subscribed to.</p></li>
            <li><p><code>unsubscribe</code>: means that we successfully unsubscribed from the
            channel given as second element in the reply. The third argument
            represents the number of channels we are currently subscribed to. When
            the last argument is zero, we are no longer subscribed to any channel,
            and the client can issue any kind of Redis command as we are outside the
            Pub/Sub state.</p></li>
            <li><p><code>message</code>: it is a message received as result of a <a href="/commands/publish">PUBLISH</a> command
            issued by another client. The second element is the name of the
            originating channel, and the third argument is the actual message
            payload.</p></li>
            </ul>
            
            <span id="database-amp-scoping" class=anchor></span><h2 ><a href="#database-amp-scoping" class=anchor-link>*</a>Database &amp; Scoping</h2>
            
            <p>Pub/Sub has no relation to the key space.  It was made to not interfere with
            it on any level, including database numbers.</p>
            
            <p>Publishing on db 10, will be heard by a subscriber on db 1.</p>
            
            <p>If you need scoping of some kind, prefix the channels with the name of the
            environment (test, staging, production, ...).</p>
            
            <span id="wire-protocol-example" class=anchor></span><h2 ><a href="#wire-protocol-example" class=anchor-link>*</a>Wire protocol example</h2>
            
            <pre><code>SUBSCRIBE first second&#x000A;*3&#x000A;$9&#x000A;subscribe&#x000A;$5&#x000A;first&#x000A;:1&#x000A;*3&#x000A;$9&#x000A;subscribe&#x000A;$6&#x000A;second&#x000A;:2&#x000A;</code></pre>
            
            <p>At this point, from another client we issue a <a href="/commands/publish">PUBLISH</a> operation
            against the channel named <code>second</code>:</p>
            
            <pre><code>&gt; PUBLISH second Hello&#x000A;</code></pre>
            
            <p>This is what the first client receives:</p>
            
            <pre><code>*3&#x000A;$7&#x000A;message&#x000A;$6&#x000A;second&#x000A;$5&#x000A;Hello&#x000A;</code></pre>
            
            <p>Now the client unsubscribes itself from all the channels using the
            <a href="/commands/unsubscribe">UNSUBSCRIBE</a> command without additional arguments:</p>
            
            <pre><code>UNSUBSCRIBE&#x000A;*3&#x000A;$11&#x000A;unsubscribe&#x000A;$6&#x000A;second&#x000A;:1&#x000A;*3&#x000A;$11&#x000A;unsubscribe&#x000A;$5&#x000A;first&#x000A;:0&#x000A;</code></pre>
            
            <span id="pattern-matching-subscriptions" class=anchor></span><h2 ><a href="#pattern-matching-subscriptions" class=anchor-link>*</a>Pattern-matching subscriptions</h2>
            
            <p>The Redis Pub/Sub implementation supports pattern matching. Clients may
            subscribe to glob-style patterns in order to receive all the messages
            sent to channel names matching a given pattern.</p>
            
            <p>For instance:</p>
            
            <pre><code>PSUBSCRIBE news.*&#x000A;</code></pre>
            
            <p>Will receive all the messages sent to the channel <code>news.art.figurative</code>,
            <code>news.music.jazz</code>, etc.  All the glob-style patterns are valid, so
            multiple wildcards are supported.</p>
            
            <pre><code>PUNSUBSCRIBE news.*&#x000A;</code></pre>
            
            <p>Will then unsubscribe the client from that pattern.  No other subscriptions
            will be affected by this call.</p>
            
            <p>Messages received as a result of pattern matching are sent in a
            different format:</p>
            
            <ul>
            <li>The type of the message is <code>pmessage</code>: it is a message received
            as result of a <a href="/commands/publish">PUBLISH</a> command issued by another client, matching
            a pattern-matching subscription. The second element is the original
            pattern matched, the third element is the name of the originating
            channel, and the last element the actual message payload.</li>
            </ul>
            
            <p>Similarly to <a href="/commands/subscribe">SUBSCRIBE</a> and <a href="/commands/unsubscribe">UNSUBSCRIBE</a>, <a href="/commands/psubscribe">PSUBSCRIBE</a> and
            <a href="/commands/punsubscribe">PUNSUBSCRIBE</a> commands are acknowledged by the system sending a message
            of type <code>psubscribe</code> and <code>punsubscribe</code> using the same format as the
            <code>subscribe</code> and <code>unsubscribe</code> message format.</p>
            
            <span id="messages-matching-both-a-pattern-and-a-channel-subscription" class=anchor></span><h2 ><a href="#messages-matching-both-a-pattern-and-a-channel-subscription" class=anchor-link>*</a>Messages matching both a pattern and a channel subscription</h2>
            
            <p>A client may receive a single message multiple times if it&#39;s subscribed
            to multiple patterns matching a published message, or if it is
            subscribed to both patterns and channels matching the message. Like in
            the following example:</p>
            
            <pre><code>SUBSCRIBE foo&#x000A;PSUBSCRIBE f*&#x000A;</code></pre>
            
            <p>In the above example, if a message is sent to channel <code>foo</code>, the client
            will receive two messages: one of type <code>message</code> and one of type
            <code>pmessage</code>.</p>
            
            <span id="the-meaning-of-the-subscription-count-with-pattern-matching" class=anchor></span><h2 ><a href="#the-meaning-of-the-subscription-count-with-pattern-matching" class=anchor-link>*</a>The meaning of the subscription count with pattern matching</h2>
            
            <p>In <code>subscribe</code>, <code>unsubscribe</code>, <code>psubscribe</code> and <code>punsubscribe</code>
            message types, the last argument is the count of subscriptions still
            active. This number is actually the total number of channels and
            patterns the client is still subscribed to. So the client will exit
            the Pub/Sub state only when this count drops to zero as a result of
            unsubscribing from all the channels and patterns.</p>
            
            <span id="programming-example" class=anchor></span><h2 ><a href="#programming-example" class=anchor-link>*</a>Programming example</h2>
            
            <p>Pieter Noordhuis provided a great example using EventMachine
            and Redis to create <a href="https://gist.github.com/pietern/348262">a multi user high performance web
            chat</a>.</p>
            
            <span id="client-library-implementation-hints" class=anchor></span><h2 ><a href="#client-library-implementation-hints" class=anchor-link>*</a>Client library implementation hints</h2>
            
            <p>Because all the messages received contain the original subscription
            causing the message delivery (the channel in the case of message type,
            and the original pattern in the case of pmessage type) client libraries
            may bind the original subscription to callbacks (that can be anonymous
            functions, blocks, function pointers), using a hash table.</p>
            
            <p>When a message is received an <span class="math">O(1) </span>lookup can be done in order to
            deliver the message to the registered callback.</p>
          </article>
        </div>
      </div>
      <footer class='site-footer'>
        <div class='container'>
          <p>
            This website is
            <a href="https://github.com/antirez/redis-io">open source software</a>.
            See all <a href="/topics/sponsors">credits</a>.
          </p>
          <div class='sponsor'>
            Sponsored by
            <a href='https://redislabs.com/'>
              <img alt='Redis Labs' height='25' src='/images/redislabs.png' title='Get a Managed Redis' width='128'>
            </a>
          </div>
        </div>
      </footer>
    </div>
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js'></script>
    <script src='/app.js?1480208557'></script>
  </body>
</html>
